/*=====================(C) COPYRIGHT 2008 Insem Inc.=========================
program 		:   
processor	  : STM32F103xx
compiler		: IAR 6.41A Compiler 
program BY 	: H.H.Hwang
date 			  : 2013.	  .
copy right 	: Plus - H.
===========================================================================*/

#define __UART3_H__

#include "stm32f10x_lib.h"
#include "main.h"


//**************************************************************************
// Rev 0.04 - 실외기 주소 어드레스 수신 추가

//============================================================================
//			CRC Calculate
//============================================================================
width CrcCompute(unsigned char *message, unsigned int nBytes)
{
  unsigned int crc = 0;
   do {
      int value = *message++;
      crc = (unsigned short)((crc << 8) ^ CCITT_CRC16_TABLE[((crc >> 8) ^ value) & 255]);
   }
   while (--nBytes);
   
 return crc;

}

//========================================================================
void UART3_control_proc()
{
  if(f_uart3_data_send_2)
  {
    f_uart3_data_send_2 = 0;

    
      if(cb_mode == 6 || cb_mode == 7 || cb_mode == 8 || cb_mode == 9)  //RCB 5E ~ RCB5N (에어컨 2대)
      {
          if((!f_ss_power_on[ss_air_address[0]]) || (!f_ss_power_on[ss_air_address[1]]))
          {
              ss_air_install_status(ss_data_counter);
          }
      }
      else //에어컨 1대
      {
         if((!f_ss_power_on[ss_air_address[0]])) ss_air_install_status(ss_data_counter);
      }        
  }
  
  if(f_uart3_data_send_ok)
  {
    f_uart3_data_send_ok = 0;
    
        if(f_ss_power_on[ss_air_address[ss_data_counter]])
        {
          if(ss_control_monitor[ss_air_address[ss_data_counter]] >= 1)
          {
            ss_control_data_set(ss_air_address[ss_data_counter], ss_data_counter);
          }
          else
          {
            if(f_uart3_data_send_3)
            {
              f_uart3_data_send_3 = 0;
              ss_control_data_set(ss_air_address[ss_data_counter], ss_data_counter);
            }
            else if(f_uart3_data_send_4)
            {
              f_uart3_data_send_4 = 0;
              ss_nofication_sensor(ss_air_address[ss_data_counter]);
            }
          }
        }
      
      if(cb_mode == 6 || cb_mode == 7 || cb_mode == 8 || cb_mode == 9) 
      {
        if(++ss_data_counter > 1) ss_data_counter = 0;
      }
      else ss_data_counter = 0;
  }
  
  if((ss_fan_speed[ss_air_address[ss_data_counter]] & 0x03) != (room_data_buf[16+ss_data_counter] & 0x03))
  {
    ss_fan_speed[ss_air_address[ss_data_counter]] = (room_data_buf[16+ss_data_counter] & 0x03);
    
    //전원 on,off start
    if((room_data_buf[16+ss_data_counter] & 0x03) != 0)  
    {
      ss_onoff_status[ss_data_counter] = 0x01;
    }
    else
    {
      ss_onoff_status[ss_data_counter] = 0x00;      
    }
    //전원 on,off end
    
    //fan start
     switch(room_data_buf[16+ss_data_counter] & 0x03)
    {
      case 0 : break;
      case 1 : ss_fan_speed[ss_data_counter] = 1; break;
      case 2 : ss_fan_speed[ss_data_counter] = 2; break;
      case 3 : ss_fan_speed[ss_data_counter] = 3; break;
    }   
    //fan end
    
    ++ss_control_monitor[ss_air_address[ss_data_counter]];
  }
  
  if((room_data_buf[110+ss_data_counter] & 0x04) != (room_data_buf[20+ss_data_counter] & 0x04)) //난방,냉방 모드 비교
  {
    room_data_buf[110+ss_data_counter] = (room_data_buf[20+ss_data_counter] & 0x04);
    if(room_data_buf[110+ss_data_counter] & 0x04) 
    {
      ss_control_mode[ss_data_counter] = 0x01;
    }
    else                                         
    {
      ss_control_mode[ss_data_counter] = 0x04;
    }
    ++ss_control_monitor[ss_air_address[ss_data_counter]];
  }
  
  if(room_data_buf[110+ss_data_counter] & 0x04) ss_set_temp[ss_air_address[ss_data_counter]] = 18;
  else                                          ss_set_temp[ss_air_address[ss_data_counter]] = 30;
  
    	
  UART3_frame_proc();
}

//=======================================================================
void UART3_frame_proc()
{
  UART3_tx_check();
  UART3_rx_check();
}

//=====================================================================
//              SAMSUNG Aircon Preamble
//====================================================================
void ss_preamble(void)
{
  uart3_txding_point = 0;
  
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;                       //10
  
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;                       //20
  
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;                       //30
  
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;                       //40
  
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;                       //50
  
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;                       //60
  
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;                       //70
  
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;                       //80
  
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;                       //90
  
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;
  uart3_tx_data_buf[uart3_txding_point++] = 0x55;                       //100
  
}
//====================================================================
//                      SAMSUNG Aircon Install status Request
//====================================================================
void ss_air_install_status(unsigned char address)
{
  int crc = 0;
  P_UART3_DIR = 1;
  
  //ss_preamble();
  uart3_tx_data_buf[uart3_txding_point++] = STX_SSAIR;
  ++uart3_txding_point;
  ++uart3_txding_point;
  
  uart3_tx_data_buf[uart3_txding_point++] = 0x51;
  uart3_tx_data_buf[uart3_txding_point++] = 0x00;
  uart3_tx_data_buf[uart3_txding_point++] = 0x00;
  
  uart3_tx_data_buf[uart3_txding_point++] = 0xB0;
  uart3_tx_data_buf[uart3_txding_point++] = 0xFF;
  uart3_tx_data_buf[uart3_txding_point++] = 0xFF;
  
  uart3_tx_data_buf[uart3_txding_point++] = SSAIR_COMMAND;
  uart3_tx_data_buf[uart3_txding_point++] = SS_COMMAND_state_normal | SS_COMMAND_type_read;
  uart3_tx_data_buf[uart3_txding_point++] = ss_packet_counter;
  
  uart3_tx_data_buf[uart3_txding_point++] = 0x02;
  
  uart3_tx_data_buf[uart3_txding_point++] = SS_long_variable;
  uart3_tx_data_buf[uart3_txding_point++] = 0x01;
  
  uart3_tx_data_buf[uart3_txding_point++] = 0xFF;
  uart3_tx_data_buf[uart3_txding_point++] = 0xFF;
  uart3_tx_data_buf[uart3_txding_point++] = 0xFF;
  uart3_tx_data_buf[uart3_txding_point++] = 0xFF;
  
  uart3_tx_data_buf[uart3_txding_point++] = SS_long_variable;
  uart3_tx_data_buf[uart3_txding_point++] = 0x02;
  
  uart3_tx_data_buf[uart3_txding_point++] = 0xFF;
  uart3_tx_data_buf[uart3_txding_point++] = 0xFF;
  uart3_tx_data_buf[uart3_txding_point++] = 0xFF;
  uart3_tx_data_buf[uart3_txding_point++] = 0xFF;
  
  crc = CrcCompute(&uart3_tx_data_buf[3],(uart3_txding_point-3));
  
  uart3_tx_data_buf[uart3_txding_point++] = ((crc >> 8) & 0xff);
  uart3_tx_data_buf[uart3_txding_point++] = (crc & 0xff);
  
  uart3_tx_data_buf[uart3_txding_point++] = ETX_SSAIR;
  
  uart3_tx_data_buf[1] = ((uart3_txding_point - 2) >> 8);
  uart3_tx_data_buf[2] = ((uart3_txding_point - 2) & 0xff);
  
  f_uart3_data_send = 1;
  f_ss_send_eco_x = 1;
  uart3_tx_backup = uart3_txding_point;
  uart3_tx_length = 0;
  uart3_txding_point = 0;
  ++ss_packet_counter;
  
  
  
  
}

//=====================================================================
//              SAMSUNG Airconditioner monitoring or control
//=====================================================================
void ss_control_data_set(unsigned char address, unsigned char buf_addr)
{
  int crc = 0;
  
  P_UART3_DIR = 1;
  //ss_preamble();
  
  uart3_tx_data_buf[uart3_txding_point++] = STX_SSAIR;                  //STX Samsung
  ++uart3_txding_point;
  ++uart3_txding_point;
  
  uart3_tx_data_buf[uart3_txding_point++] = 0x51;
  uart3_tx_data_buf[uart3_txding_point++] = 0x00;
  uart3_tx_data_buf[uart3_txding_point++] = 0x00;
  
  uart3_tx_data_buf[uart3_txding_point++] = 0x20;
  uart3_tx_data_buf[uart3_txding_point++] = ss_outdoor_address[ss_data_counter];
  uart3_tx_data_buf[uart3_txding_point++] = address;
  
  if(ss_control_monitor[address] >= 1)
  {
      
      uart3_tx_data_buf[uart3_txding_point++] = SSAIR_COMMAND;
      uart3_tx_data_buf[uart3_txding_point++] = SS_COMMAND_state_normal | SS_COMMAND_type_request;
      uart3_tx_data_buf[uart3_txding_point++] = ss_packet_counter;
      
      uart3_tx_data_buf[uart3_txding_point++] = 0x05;
      
      uart3_tx_data_buf[uart3_txding_point++] = SSAIR_CONTROL_MONITOR | SS_enumeration;
      uart3_tx_data_buf[uart3_txding_point++] = 0x50;
      uart3_tx_data_buf[uart3_txding_point++] = 0x01; //BUZZER X 
      
      uart3_tx_data_buf[uart3_txding_point++] = SSAIR_CONTROL_MONITOR | SS_enumeration;
      uart3_tx_data_buf[uart3_txding_point++] = 0x00;
      uart3_tx_data_buf[uart3_txding_point++] = ss_onoff_status[buf_addr];
      
      uart3_tx_data_buf[uart3_txding_point++] = SSAIR_CONTROL_MONITOR | SS_enumeration;
      uart3_tx_data_buf[uart3_txding_point++] = 0x01;
      uart3_tx_data_buf[uart3_txding_point++] = ss_control_mode[buf_addr];
      
      uart3_tx_data_buf[uart3_txding_point++] = SSAIR_CONTROL_MONITOR | SS_enumeration;
      uart3_tx_data_buf[uart3_txding_point++] = 0x06;
      uart3_tx_data_buf[uart3_txding_point++] = ss_fan_speed[buf_addr];
      
      uart3_tx_data_buf[uart3_txding_point++] = SSAIR_CONTROL_MONITOR | SS_variable;
      uart3_tx_data_buf[uart3_txding_point++] = 0x01;
      ss_set_temp_dec = (((int)(ss_set_temp[address] & 0x7f)) * 10);
      if(ss_set_temp[address] & 0x80) ss_set_temp_dec += 5;
      
      uart3_tx_data_buf[uart3_txding_point++] = (ss_set_temp_dec >> 8);
      uart3_tx_data_buf[uart3_txding_point++] = (ss_set_temp_dec & 0x00ff);
      
      crc = CrcCompute(&uart3_tx_data_buf[3], (uart3_txding_point-3));
      
      uart3_tx_data_buf[uart3_txding_point++] = (crc >> 8);
      uart3_tx_data_buf[uart3_txding_point++] = (crc & 0x00ff);
      
      uart3_tx_data_buf[uart3_txding_point++] = ETX_SSAIR;
      
      uart3_tx_data_buf[1] = ((uart3_txding_point - 2) >> 8);
      uart3_tx_data_buf[2] = ((uart3_txding_point - 2) & 0xff);
      
      f_uart3_data_send = 1;
      f_ss_send_eco_x = 1;
      uart3_tx_backup = uart3_txding_point;
      uart3_tx_length = 0;
      uart3_txding_point = 0;
      ++ss_packet_counter;
  }
  else
  {
      uart3_tx_data_buf[uart3_txding_point++] = SSAIR_COMMAND;
      uart3_tx_data_buf[uart3_txding_point++] = SS_COMMAND_state_normal | SS_COMMAND_type_read;
      uart3_tx_data_buf[uart3_txding_point++] = ss_packet_counter;
      
      uart3_tx_data_buf[uart3_txding_point++] = 0x06;
      
      uart3_tx_data_buf[uart3_txding_point++] = SSAIR_CONTROL_MONITOR | SS_enumeration;
      uart3_tx_data_buf[uart3_txding_point++] = 0x00;
      uart3_tx_data_buf[uart3_txding_point++] = 0xFF;
      
      uart3_tx_data_buf[uart3_txding_point++] = SSAIR_CONTROL_MONITOR | SS_enumeration;
      uart3_tx_data_buf[uart3_txding_point++] = 0x01;
      uart3_tx_data_buf[uart3_txding_point++] = 0xFF;
      
      uart3_tx_data_buf[uart3_txding_point++] = SSAIR_CONTROL_MONITOR | SS_enumeration;
      uart3_tx_data_buf[uart3_txding_point++] = 0x06;
      uart3_tx_data_buf[uart3_txding_point++] = 0xFF;
      
      uart3_tx_data_buf[uart3_txding_point++] = SSAIR_CONTROL_MONITOR | SS_variable;
      uart3_tx_data_buf[uart3_txding_point++] = 0x01;
      uart3_tx_data_buf[uart3_txding_point++] = 0xFF;
      uart3_tx_data_buf[uart3_txding_point++] = 0xFF;
      
      uart3_tx_data_buf[uart3_txding_point++] = SSAIR_CONTROL_MONITOR | SS_variable;
      uart3_tx_data_buf[uart3_txding_point++] = 0x41;
      uart3_tx_data_buf[uart3_txding_point++] = 0xFF;
      uart3_tx_data_buf[uart3_txding_point++] = 0xFF;
      
      uart3_tx_data_buf[uart3_txding_point++] = SS_variable;
      uart3_tx_data_buf[uart3_txding_point++] = 0x02;
      uart3_tx_data_buf[uart3_txding_point++] = 0xFF;
      uart3_tx_data_buf[uart3_txding_point++] = 0xFF;
      
      crc = CrcCompute(&uart3_tx_data_buf[3], (uart3_txding_point-3));
    
      uart3_tx_data_buf[uart3_txding_point++] = (crc >> 8);
      uart3_tx_data_buf[uart3_txding_point++] = (crc & 0x00ff);
      
      uart3_tx_data_buf[uart3_txding_point++] = ETX_SSAIR;
      
      uart3_tx_data_buf[1] = ((uart3_txding_point - 2) >> 8);
      uart3_tx_data_buf[2] = ((uart3_txding_point - 2) & 0xff);
      
      f_uart3_data_send = 1;
      f_ss_send_eco_x = 1;
      uart3_tx_backup = uart3_txding_point;
      uart3_tx_length = 0;
      uart3_txding_point = 0;
      ++ss_packet_counter;
      
      
    
  }
  
  
}

//======================================================================
//              SAMSUNG Sensor Nofication
//======================================================================
void ss_nofication_sensor(unsigned char address)
{
  int crc = 0;
  
  P_UART3_DIR = 1;
  //ss_preamble();
  
  uart3_tx_data_buf[uart3_txding_point++] = STX_SSAIR;                  //STX Samsung
  ++uart3_txding_point;
  ++uart3_txding_point;
  
  uart3_tx_data_buf[uart3_txding_point++] = 0x51;
  uart3_tx_data_buf[uart3_txding_point++] = 0x00;
  uart3_tx_data_buf[uart3_txding_point++] = 0x00;
  
  uart3_tx_data_buf[uart3_txding_point++] = 0x20;
  uart3_tx_data_buf[uart3_txding_point++] = ss_outdoor_address[0];
  uart3_tx_data_buf[uart3_txding_point++] = address;
  
  uart3_tx_data_buf[uart3_txding_point++] = SSAIR_COMMAND;
  uart3_tx_data_buf[uart3_txding_point++] = SS_COMMAND_state_normal | SS_COMMAND_type_nofication;
  uart3_tx_data_buf[uart3_txding_point++] = ss_packet_counter;
  
  uart3_tx_data_buf[uart3_txding_point++] = 0x02;
  
  uart3_tx_data_buf[uart3_txding_point++] = SSAIR_CONTROL_MONITOR | SS_enumeration;
  uart3_tx_data_buf[uart3_txding_point++] = 0x76;
  uart3_tx_data_buf[uart3_txding_point++] = 0x00;
  
  uart3_tx_data_buf[uart3_txding_point++] = SSAIR_CONTROL_MONITOR | SS_variable;
  uart3_tx_data_buf[uart3_txding_point++] = 0x3A;
  uart3_tx_data_buf[uart3_txding_point++] = 0x00;
  uart3_tx_data_buf[uart3_txding_point++] = 0x00;
  
  crc = CrcCompute(&uart3_tx_data_buf[3], (uart3_txding_point-3));
    
  uart3_tx_data_buf[uart3_txding_point++] = (crc >> 8);
  uart3_tx_data_buf[uart3_txding_point++] = (crc & 0x00ff);
      
  uart3_tx_data_buf[uart3_txding_point++] = ETX_SSAIR;
      
  uart3_tx_data_buf[1] = ((uart3_txding_point - 2) >> 8);
  uart3_tx_data_buf[2] = ((uart3_txding_point - 2) & 0xff);
      
  f_uart3_data_send = 1;
  f_ss_send_eco_x = 1;
  uart3_tx_backup = uart3_txding_point;
  uart3_tx_length = 0;
  uart3_txding_point = 0;
  ++ss_packet_counter;
}
 
//======================================================================
//                        UART3 Tx Check Routine
//======================================================================
void UART3_tx_check(void)
{
  if(f_uart3_data_start)
  {
    f_uart3_data_send = 0;
    if(USART_GetFlagStatus(USART3, USART_FLAG_TC) !=RESET) 
    {
      if(uart3_tx_length < uart3_tx_backup)
      {
        USART3->DR = (uart3_tx_data_buf[uart3_tx_length++] & (u16)0x01FF);
      }
      else
      {
        P_UART3_DIR = 0;
        f_uart3_data_send = 0;
        f_uart3_data_start = 0;
        f_ss_send_eco_x = 0;
      }
    }
  }
}


	


//==========================================================================
//                          UART3 Rx Check
//==========================================================================
void UART3_rx_check()
{
  short crc = 0;
  short ss_set_temp_buf = 0; 
  if(f_uart3_frame_rx_ok)
  {
    led4 ^= 1;
    
    f_uart3_frame_rx_ok = 0;
    crc = CrcCompute(&uart3_rxd_buf[3],(uart3_rxd_buf[2]-4));
    
      if((uart3_rxd_buf[uart3_rxd_buf[2]-1] == ((unsigned char)(crc >> 8))) && (uart3_rxd_buf[uart3_rxd_buf[2]] == ((unsigned char)(crc & 0xff))))
      {
        if(uart3_rxd_buf[3] == 0x20)
        {
          if(uart3_rxd_buf[6] == 0xB0)
          {
            if(uart3_rxd_buf[9] == SSAIR_COMMAND)
            {
              if((uart3_rxd_buf[10] & 0x30) == 0x00)
              {
                f_ss_reset = 1;
              }
              if(f_ss_reset)                            
              {
                if((uart3_rxd_buf[10] & 0x30) == 0x30)          //20170313 RESET 추가 항목
                {
                  f_ss_reset = 0;
                  f_ss_power_on[ss_air_address[0]] = 0;
                  if(cb_mode == 5 || cb_mode == 6 || cb_mode == 7) f_ss_power_on[ss_air_address[1]] = 0;
                  if(cb_mode == 7) f_ss_power_on[ss_air_address[2]] = 0;
                }
              }
            }
          }
          if(uart3_rxd_buf[6] == 0x51)             //SS Install Status
          {
            if(uart3_rxd_buf[9] == SSAIR_COMMAND)
            {
              if(uart3_rxd_buf[10] == (SS_COMMAND_state_normal | SS_COMMAND_type_response))
              {
                if(uart3_rxd_buf[12] == 0x02)
                {
                  if(!f_ss_power_on[uart3_rxd_buf[18]])
                  {
                    if(uart3_rxd_buf[3] == uart3_rxd_buf[16])
                    {
                        if(cb_mode == 6 || cb_mode == 7 || cb_mode == 8 || cb_mode == 9) //RCB - 5E ~ RCB  - 5N
                        {
                          if(!f_ss_first_addr) //1번 에어컨
                          {
                              ss_outdoor_address[0] = uart3_rxd_buf[17];
                              ss_air_address[0] = uart3_rxd_buf[18];
                              f_ss_power_on[ss_air_address[0]] = 1;
                              f_ss_first_addr = 1;
                              if(room_data_buf[20] & 0x04) room_data_buf[110] &= 0xfb;
                              else                         room_data_buf[110] |= 0x04;
                              
                              f_plc_add_toggle[0] = 0; // 에어컨1 연결 OK
                              aircon_no_respones[0] = 0; //에어컨1 연결 OK
                          }
                          else  //2번 에어컨
                          {
                                ss_outdoor_address[1] = uart3_rxd_buf[17];
                                ss_air_address[1] = uart3_rxd_buf[18];
                                f_ss_power_on[ss_air_address[1]] = 1;
                                if(room_data_buf[21] & 0x04) room_data_buf[111] &= 0xfb;
                                else                         room_data_buf[111] |= 0x04;
                                
                                f_plc_add_toggle[1] = 0; //에어컨2  연결 OK
                                aircon_no_respones[1] = 0; //에어컨2 연결 OK
                          }                          
                        }
                        else
                        {
                            ss_outdoor_address[0] = uart3_rxd_buf[17];
                            ss_air_address[0] = uart3_rxd_buf[18];
                            f_ss_power_on[ss_air_address[0]] = 1;
                            if(room_data_buf[20] & 0x04) room_data_buf[110] &= 0xfb;
                            else                         room_data_buf[110] |= 0x04;     
                            
                            f_plc_add_toggle[0] = 0; // 에어컨1 연결 OK
                            aircon_no_respones[0] = 0; //에어컨1 연결 OK
                        }
                      
                    }
                  }
                }
                else if(uart3_rxd_buf[12] == 0x06)              //SS Monitoring
                {
                  if(uart3_rxd_buf[5] == ss_air_address[0])
                  {
                    if(f_ss_power_on[ss_air_address[0]]) //에어컨 1
                    {
                      f_plc_add_toggle[0] = 0; // 에어컨1 연결 OK
                      aircon_no_respones[0] = 0; //에어컨1 연결 OK
                      
                      if(uart3_rxd_buf[15] != ss_onoff_status[0])
                      {
                        ss_control_monitor[ss_air_address[0]] = 1;
                      }
                      if(uart3_rxd_buf[18] != ss_control_mode[0])
                      {
                        ss_control_monitor[ss_air_address[0]] = 1;
                      }
                      if(uart3_rxd_buf[21] != ss_fan_speed[0])
                      {
                        ss_control_monitor[ss_air_address[0]] = 1;
                      }
                      ss_set_temp_buf = (((int)(ss_set_temp[0] & 0x7f)) * 10);
                      if(ss_set_temp[0] & 0x80) ss_set_temp_buf += 5;
                      ss_rx_set_temp = ((uart3_rxd_buf[24] << 8) | (uart3_rxd_buf[25] & 0xff));
                      if(ss_set_temp_buf != ss_rx_set_temp)
                      {
                        ss_control_monitor[ss_air_address[0]] = 1;
                      }
                      if(ss_remocon_sensor_temp[ss_air_address[0]] != ((short)((uart3_rxd_buf[28] << 8) | (uart3_rxd_buf[29] & 0xff))))
                      {
                        ss_remocon_sensor_temp[ss_air_address[0]] = ((uart3_rxd_buf[28] << 8) | (uart3_rxd_buf[29] & 0xff));
                      }
                      if((uart3_rxd_buf[30] == 0x02) && (uart3_rxd_buf[31] == 0x02))
                      {
                        ss_error_code[ss_air_address[0]] = ((uart3_rxd_buf[33] << 8) | (uart3_rxd_buf[34] & 0xff));
                      }
                    }
                  }
                  if(cb_mode == 6 || cb_mode == 7 || cb_mode == 8 || cb_mode == 9) //에어컨 2
                  {
                    if(f_ss_power_on[ss_air_address[1]])
                    {
                      f_plc_add_toggle[1] = 0; //에어컨2  연결 OK
                      aircon_no_respones[1] = 0; //에어컨2 연결 OK
                      
                      if(uart3_rxd_buf[15] != ss_onoff_status[1])
                      {
                        ss_control_monitor[ss_air_address[1]] = 1;
                      }
                      if(uart3_rxd_buf[18] != ss_control_mode[1])
                      {
                        ss_control_monitor[ss_air_address[1]] = 1;
                      }
                      if(uart3_rxd_buf[21] != ss_fan_speed[1])
                      {
                        ss_control_monitor[ss_air_address[1]] = 1;
                      }
                      ss_set_temp_buf = (((int)(ss_set_temp[1] & 0x7f)) * 10);
                      if(ss_set_temp[1] & 0x80) ss_set_temp_buf += 5;
                      ss_rx_set_temp = ((uart3_rxd_buf[24] << 8) | (uart3_rxd_buf[25] & 0xff));
                      if(ss_set_temp_buf != ss_rx_set_temp)
                      {
                        ss_control_monitor[ss_air_address[1]] = 1;
                      }
                      if(ss_remocon_sensor_temp[ss_air_address[1]] != ((short)((uart3_rxd_buf[28] << 8) | (uart3_rxd_buf[29] & 0xff))))
                      {
                        ss_remocon_sensor_temp[ss_air_address[1]] = ((uart3_rxd_buf[28] << 8) | (uart3_rxd_buf[29] & 0xff));
                      }
                      if((uart3_rxd_buf[30] == 0x02) && (uart3_rxd_buf[31] == 0x02))
                      {
                        ss_error_code[ss_air_address[1]] = ((uart3_rxd_buf[33] << 8) | (uart3_rxd_buf[34] & 0xff));
                      }
                    }
                  }
                }
              }
              else if(uart3_rxd_buf[10] == 0x16)
              {
                if(uart3_rxd_buf[5] == ss_air_address[0]) ss_control_monitor[ss_air_address[0]] = 0;
                if(cb_mode == 6 || cb_mode == 7 || cb_mode == 8 || cb_mode == 9) if(uart3_rxd_buf[5] == ss_air_address[1]) ss_control_monitor[ss_air_address[1]] = 0;
              }
            }
          }
        }
        
      }
  }
  else
  {
       if(cb_mode == 6 || cb_mode == 7 || cb_mode == 8 || cb_mode == 9) //에어컨 2대
       {
            f_plc_add_toggle[0] = 1; //air 1 수신 X flag set
            f_plc_add_toggle[1] = 1; //air 2 수신 X flag set          
       }
       else //에어컨 1대
       {
            f_plc_add_toggle[0] = 1; //air 1 수신 X flag set
       }
  }
}
		
//========================================================================
/* UART3_initial	:								              */												
//========================================================================
void UART3_initial(void) {
NVIC_InitTypeDef NVIC_InitStructure;
USART_InitTypeDef USART_InitStructure;
GPIO_InitTypeDef GPIO_InitStructure;

	 /* Enable the USART3 Pins Partial Software Remapping */
//	GPIO_PinRemapConfig(GPIO_Remap_USART3, DISABLE);  

	/* Enable GPIOB and USART3 clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB|RCC_APB2Periph_AFIO, ENABLE);
	 /* Enable USART3 clocks */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);

	/* Configure USART3 Tx (PB10) as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	/* Configure USART3 Rx (PB11) as input floating */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

/* USART3 configuration ------------------------------------------------------*/
  /* USART3 configured as follow:
        - BaudRate = 115200 baud  
        - Word Length = 8 Bits
        - one Stop Bit
        - No parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled
        - USART Clock disabled
        - USART CPOL: Clock is active low
        - USART CPHA: Data is captured on the second edge 
        - USART LastBit: The clock pulse of the last data bit is not output to 
                         the SCLK pin
  */
  USART_InitStructure.USART_BaudRate = 9600;
  USART_InitStructure.USART_WordLength = USART_WordLength_9b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_Even;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
//  USART_InitStructure.USART_Clock = USART_Clock_Disable;
// USART_InitStructure.USART_CPOL = USART_CPOL_Low;
//  USART_InitStructure.USART_CPHA = USART_CPHA_2Edge;
//  USART_InitStructure.USART_LastBit = USART_LastBit_Disable;
  
  /* Configure the USART3 */
  USART_Init(USART3, &USART_InitStructure);
  
 /* Enable the USART Transmoit interrupt: this interrupt is generated when the 
   USART1 transmit data register is empty */  
//  USART_ITConfig(USART3, USART_IT_TXE, ENABLE);
  
/* Enable the USART Receive interrupt: this interrupt is generated when the 
   USART3 receive data register is not empty */
  USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
  
  /* Enable USART3 */
  USART_Cmd(USART3, ENABLE);
  
  /* Enable the USART3 Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQChannel;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
}



  // ***************************************** //
  

